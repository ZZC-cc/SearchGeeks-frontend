import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createVNode as _createVNode } from "vue";
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
import { shallowRef, computed, defineComponent } from 'vue';
import { useNotification as useVcNotification } from '../vc-notification';
import useStyle from './style';
import { getCloseIcon, PureContent } from './PurePanel';
import { getMotion, getPlacementStyle } from './util';
import useConfigInject from '../config-provider/hooks/useConfigInject';
import classNames from '../_util/classNames';
var DEFAULT_OFFSET = 24;
var DEFAULT_DURATION = 4.5;
var Holder = defineComponent({
  name: 'Holder',
  inheritAttrs: false,
  props: ['prefixCls', 'class', 'type', 'icon', 'content', 'onAllRemoved'],
  setup: function setup(props, _ref) {
    var expose = _ref.expose;
    var _useConfigInject = useConfigInject('notification', props),
      getPrefixCls = _useConfigInject.getPrefixCls,
      getPopupContainer = _useConfigInject.getPopupContainer;
    var prefixCls = computed(function () {
      return props.prefixCls || getPrefixCls('notification');
    });
    // =============================== Style ===============================
    var getStyles = function getStyles(placement) {
      var _a, _b;
      return getPlacementStyle(placement, (_a = props.top) !== null && _a !== void 0 ? _a : DEFAULT_OFFSET, (_b = props.bottom) !== null && _b !== void 0 ? _b : DEFAULT_OFFSET);
    };
    // Style
    var _useStyle = useStyle(prefixCls),
      _useStyle2 = _slicedToArray(_useStyle, 2),
      hashId = _useStyle2[1];
    var getClassName = function getClassName() {
      return classNames(hashId.value, _defineProperty({}, "".concat(prefixCls.value, "-rtl"), props.rtl));
    };
    // ============================== Motion ===============================
    var getNotificationMotion = function getNotificationMotion() {
      return getMotion(prefixCls.value);
    };
    // ============================== Origin ===============================
    var _useVcNotification = useVcNotification({
        prefixCls: prefixCls.value,
        getStyles: getStyles,
        getClassName: getClassName,
        motion: getNotificationMotion,
        closable: true,
        closeIcon: getCloseIcon(prefixCls.value),
        duration: DEFAULT_DURATION,
        getContainer: function getContainer() {
          var _a, _b;
          return ((_a = props.getPopupContainer) === null || _a === void 0 ? void 0 : _a.call(props)) || ((_b = getPopupContainer.value) === null || _b === void 0 ? void 0 : _b.call(getPopupContainer)) || document.body;
        },
        maxCount: props.maxCount,
        hashId: hashId.value,
        onAllRemoved: props.onAllRemoved
      }),
      _useVcNotification2 = _slicedToArray(_useVcNotification, 2),
      api = _useVcNotification2[0],
      holder = _useVcNotification2[1];
    // ================================ Ref ================================
    expose(_extends(_extends({}, api), {
      prefixCls: prefixCls.value,
      hashId: hashId
    }));
    return holder;
  }
});
// ==============================================================================
// ==                                   Hook                                   ==
// ==============================================================================
export function useInternalNotification(notificationConfig) {
  var holderRef = shallowRef(null);
  var holderKey = Symbol('notificationHolderKey');
  // ================================ API ================================
  // Wrap with notification content
  // >>> Open
  var open = function open(config) {
    if (!holderRef.value) {
      return;
    }
    var _holderRef$value = holderRef.value,
      originOpen = _holderRef$value.open,
      prefixCls = _holderRef$value.prefixCls,
      hashId = _holderRef$value.hashId;
    var noticePrefixCls = "".concat(prefixCls, "-notice");
    var message = config.message,
      description = config.description,
      icon = config.icon,
      type = config.type,
      btn = config.btn,
      className = config.class,
      restConfig = __rest(config, ["message", "description", "icon", "type", "btn", "class"]);
    return originOpen(_extends(_extends({
      placement: 'topRight'
    }, restConfig), {
      content: function content() {
        return _createVNode(PureContent, {
          "prefixCls": noticePrefixCls,
          "icon": typeof icon === 'function' ? icon() : icon,
          "type": type,
          "message": typeof message === 'function' ? message() : message,
          "description": typeof description === 'function' ? description() : description,
          "btn": typeof btn === 'function' ? btn() : btn
        }, null);
      },
      // @ts-ignore
      class: classNames(type && "".concat(noticePrefixCls, "-").concat(type), hashId, className)
    }));
  };
  // >>> destroy
  var destroy = function destroy(key) {
    var _a, _b;
    if (key !== undefined) {
      (_a = holderRef.value) === null || _a === void 0 ? void 0 : _a.close(key);
    } else {
      (_b = holderRef.value) === null || _b === void 0 ? void 0 : _b.destroy();
    }
  };
  var wrapAPI = {
    open: open,
    destroy: destroy
  };
  var keys = ['success', 'info', 'warning', 'error'];
  keys.forEach(function (type) {
    wrapAPI[type] = function (config) {
      return open(_extends(_extends({}, config), {
        type: type
      }));
    };
  });
  // ============================== Return ===============================
  return [wrapAPI, function () {
    return _createVNode(Holder, _objectSpread(_objectSpread({
      "key": holderKey
    }, notificationConfig), {}, {
      "ref": holderRef
    }), null);
  }];
}
export default function useNotification(notificationConfig) {
  return useInternalNotification(notificationConfig);
}