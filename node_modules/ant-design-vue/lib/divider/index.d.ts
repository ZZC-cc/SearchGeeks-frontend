import type { ExtractPropTypes, PropType } from 'vue';
export declare const dividerProps: () => {
    prefixCls: StringConstructor;
    type: {
        type: PropType<"" | "vertical" | "horizontal">;
        default: string;
    };
    dashed: {
        type: BooleanConstructor;
        default: boolean;
    };
    orientation: {
        type: PropType<"left" | "right" | "center">;
        default: string;
    };
    plain: {
        type: BooleanConstructor;
        default: boolean;
    };
    orientationMargin: (StringConstructor | NumberConstructor)[];
};
export type DividerProps = Partial<ExtractPropTypes<ReturnType<typeof dividerProps>>>;
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            type: "" | "vertical" | "horizontal";
            dashed: boolean;
            orientation: "left" | "right" | "center";
            plain: boolean;
        }> & Omit<Readonly<ExtractPropTypes<{
            prefixCls: StringConstructor;
            type: {
                type: PropType<"" | "vertical" | "horizontal">;
                default: string;
            };
            dashed: {
                type: BooleanConstructor;
                default: boolean;
            };
            orientation: {
                type: PropType<"left" | "right" | "center">;
                default: string;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            orientationMargin: (StringConstructor | NumberConstructor)[];
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "type" | "dashed" | "orientation" | "plain">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<ExtractPropTypes<{
            prefixCls: StringConstructor;
            type: {
                type: PropType<"" | "vertical" | "horizontal">;
                default: string;
            };
            dashed: {
                type: BooleanConstructor;
                default: boolean;
            };
            orientation: {
                type: PropType<"left" | "right" | "center">;
                default: string;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            orientationMargin: (StringConstructor | NumberConstructor)[];
        }>>, () => import("../_util/type").VueNode, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            type: "" | "vertical" | "horizontal";
            dashed: boolean;
            orientation: "left" | "right" | "center";
            plain: boolean;
        }, {}, string> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<ExtractPropTypes<{
        prefixCls: StringConstructor;
        type: {
            type: PropType<"" | "vertical" | "horizontal">;
            default: string;
        };
        dashed: {
            type: BooleanConstructor;
            default: boolean;
        };
        orientation: {
            type: PropType<"left" | "right" | "center">;
            default: string;
        };
        plain: {
            type: BooleanConstructor;
            default: boolean;
        };
        orientationMargin: (StringConstructor | NumberConstructor)[];
    }>> & import("vue").ShallowUnwrapRef<() => import("../_util/type").VueNode> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<ExtractPropTypes<{
    prefixCls: StringConstructor;
    type: {
        type: PropType<"" | "vertical" | "horizontal">;
        default: string;
    };
    dashed: {
        type: BooleanConstructor;
        default: boolean;
    };
    orientation: {
        type: PropType<"left" | "right" | "center">;
        default: string;
    };
    plain: {
        type: BooleanConstructor;
        default: boolean;
    };
    orientationMargin: (StringConstructor | NumberConstructor)[];
}>>, () => import("../_util/type").VueNode, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    type: "" | "vertical" | "horizontal";
    dashed: boolean;
    orientation: "left" | "right" | "center";
    plain: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("@vue/runtime-core").Plugin<any[]>;
export default _default;
