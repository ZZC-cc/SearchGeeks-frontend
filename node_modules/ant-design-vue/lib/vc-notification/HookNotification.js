"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getUuid = getUuid;
var _vue = require("vue");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _Notice = _interopRequireDefault(require("./Notice"));
var _transition = require("../_util/transition");
var _classNames = _interopRequireDefault(require("../_util/classNames"));
var _Portal = _interopRequireDefault(require("../_util/Portal"));
var seed = 0;
var now = Date.now();
function getUuid() {
  var id = seed;
  seed += 1;
  return "rcNotification_".concat(now, "_").concat(id);
}
var Notification = (0, _vue.defineComponent)({
  name: 'HookNotification',
  inheritAttrs: false,
  props: ['prefixCls', 'transitionName', 'animation', 'maxCount', 'closeIcon', 'hashId', 'remove', 'notices', 'getStyles', 'getClassName', 'onAllRemoved', 'getContainer'],
  setup: function setup(props, _ref) {
    var attrs = _ref.attrs,
      slots = _ref.slots;
    var hookRefs = new Map();
    var notices = (0, _vue.computed)(function () {
      return props.notices;
    });
    var transitionProps = (0, _vue.computed)(function () {
      var name = props.transitionName;
      if (!name && props.animation) {
        switch ((0, _typeof2.default)(props.animation)) {
          case 'string':
            name = props.animation;
            break;
          case 'function':
            name = props.animation().name;
            break;
          case 'object':
            name = props.animation.name;
            break;
          default:
            name = "".concat(props.prefixCls, "-fade");
            break;
        }
      }
      return (0, _transition.getTransitionGroupProps)(name);
    });
    var remove = function remove(key) {
      return props.remove(key);
    };
    var placements = (0, _vue.ref)({});
    (0, _vue.watch)(notices, function () {
      var nextPlacements = {};
      // init placements with animation
      Object.keys(placements.value).forEach(function (placement) {
        nextPlacements[placement] = [];
      });
      props.notices.forEach(function (config) {
        var _config$notice$placem = config.notice.placement,
          placement = _config$notice$placem === void 0 ? 'topRight' : _config$notice$placem;
        if (placement) {
          nextPlacements[placement] = nextPlacements[placement] || [];
          nextPlacements[placement].push(config);
        }
      });
      placements.value = nextPlacements;
    });
    var placementList = (0, _vue.computed)(function () {
      return Object.keys(placements.value);
    });
    return function () {
      var _a;
      var prefixCls = props.prefixCls,
        _props$closeIcon = props.closeIcon,
        closeIcon = _props$closeIcon === void 0 ? (_a = slots.closeIcon) === null || _a === void 0 ? void 0 : _a.call(slots, {
          prefixCls: prefixCls
        }) : _props$closeIcon;
      var noticeNodes = placementList.value.map(function (placement) {
        var _className;
        var _a, _b;
        var noticesForPlacement = placements.value[placement];
        var classes = (_a = props.getClassName) === null || _a === void 0 ? void 0 : _a.call(props, placement);
        var styles = (_b = props.getStyles) === null || _b === void 0 ? void 0 : _b.call(props, placement);
        var noticeNodesForPlacement = noticesForPlacement.map(function (_ref2, index) {
          var notice = _ref2.notice,
            holderCallback = _ref2.holderCallback;
          var updateMark = index === notices.value.length - 1 ? notice.updateMark : undefined;
          var key = notice.key,
            userPassKey = notice.userPassKey;
          var content = notice.content;
          var noticeProps = (0, _extends2.default)((0, _extends2.default)((0, _extends2.default)({
            prefixCls: prefixCls,
            closeIcon: typeof closeIcon === 'function' ? closeIcon({
              prefixCls: prefixCls
            }) : closeIcon
          }, notice), notice.props), {
            key: key,
            noticeKey: userPassKey || key,
            updateMark: updateMark,
            onClose: function onClose(noticeKey) {
              var _a;
              remove(noticeKey);
              (_a = notice.onClose) === null || _a === void 0 ? void 0 : _a.call(notice);
            },
            onClick: notice.onClick
          });
          if (holderCallback) {
            return (0, _vue.createVNode)("div", {
              "key": key,
              "class": "".concat(prefixCls, "-hook-holder"),
              "ref": function ref(div) {
                if (typeof key === 'undefined') {
                  return;
                }
                if (div) {
                  hookRefs.set(key, div);
                  holderCallback(div, noticeProps);
                } else {
                  hookRefs.delete(key);
                }
              }
            }, null);
          }
          return (0, _vue.createVNode)(_Notice.default, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, noticeProps), {}, {
            "class": (0, _classNames.default)(noticeProps.class, props.hashId)
          }), {
            default: function _default() {
              return [typeof content === 'function' ? content({
                prefixCls: prefixCls
              }) : content];
            }
          });
        });
        var className = (_className = {}, (0, _defineProperty2.default)(_className, prefixCls, 1), (0, _defineProperty2.default)(_className, "".concat(prefixCls, "-").concat(placement), 1), (0, _defineProperty2.default)(_className, attrs.class, !!attrs.class), (0, _defineProperty2.default)(_className, props.hashId, true), (0, _defineProperty2.default)(_className, classes, !!classes), _className);
        function onAfterLeave() {
          var _a;
          if (noticesForPlacement.length > 0) {
            return;
          }
          Reflect.deleteProperty(placements.value, placement);
          (_a = props.onAllRemoved) === null || _a === void 0 ? void 0 : _a.call(props);
        }
        return (0, _vue.createVNode)("div", {
          "key": placement,
          "class": className,
          "style": attrs.style || styles || {
            top: '65px',
            left: '50%'
          }
        }, [(0, _vue.createVNode)(_vue.TransitionGroup, (0, _objectSpread2.default)((0, _objectSpread2.default)({
          "tag": "div"
        }, transitionProps.value), {}, {
          "onAfterLeave": onAfterLeave
        }), {
          default: function _default() {
            return [noticeNodesForPlacement];
          }
        })]);
      });
      return (0, _vue.createVNode)(_Portal.default, {
        "getContainer": props.getContainer
      }, {
        default: function _default() {
          return [noticeNodes];
        }
      });
    };
  }
});
var _default2 = Notification;
exports.default = _default2;