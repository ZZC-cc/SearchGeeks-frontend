{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-namespace */\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\n'use strict';\n\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar qrcodegen;\n(function (qrcodegen) {\n  /*---- QR Code symbol class ----*/\n  /*\n   * A QR Code symbol, which is a type of two-dimension barcode.\n   * Invented by Denso Wave and described in the ISO/IEC 18004 standard.\n   * Instances of this class represent an immutable square grid of dark and light cells.\n   * The class provides static factory functions to create a QR Code from text or binary data.\n   * The class covers the QR Code Model 2 specification, supporting all versions (sizes)\n   * from 1 to 40, all 4 error correction levels, and 4 character encoding modes.\n   *\n   * Ways to create a QR Code object:\n   * - High level: Take the payload data and call QrCode.encodeText() or QrCode.encodeBinary().\n   * - Mid level: Custom-make the list of segments and call QrCode.encodeSegments().\n   * - Low level: Custom-make the array of data codeword bytes (including\n   *   segment headers and final padding, excluding error correction codewords),\n   *   supply the appropriate version number, and call the QrCode() constructor.\n   * (Note that all ways require supplying the desired error correction level.)\n   */\n  var QrCode = /*#__PURE__*/function () {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    function QrCode(\n    // The version number of this QR Code, which is between 1 and 40 (inclusive).\n    // This determines the size of this barcode.\n    version,\n    // The error correction level used in this QR Code.\n    errorCorrectionLevel, dataCodewords, msk) {\n      _classCallCheck(this, QrCode);\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      // The modules of this QR Code (false = light, true = dark).\n      // Immutable after constructor finishes. Accessed through getModule().\n      this.modules = [];\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n      this.isFunction = [];\n      // Check scalar arguments\n      if (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION) throw new RangeError('Version value out of range');\n      if (msk < -1 || msk > 7) throw new RangeError('Mask value out of range');\n      this.size = version * 4 + 17;\n      // Initialize both grids to be size*size arrays of Boolean false\n      var row = [];\n      for (var i = 0; i < this.size; i++) row.push(false);\n      for (var _i = 0; _i < this.size; _i++) {\n        this.modules.push(row.slice()); // Initially all light\n        this.isFunction.push(row.slice());\n      }\n      // Compute ECC, draw modules\n      this.drawFunctionPatterns();\n      var allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      // Do masking\n      if (msk == -1) {\n        // Automatically choose best mask\n        var minPenalty = 1000000000;\n        for (var _i2 = 0; _i2 < 8; _i2++) {\n          this.applyMask(_i2);\n          this.drawFormatBits(_i2);\n          var penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = _i2;\n            minPenalty = penalty;\n          }\n          this.applyMask(_i2); // Undoes the mask due to XOR\n        }\n      }\n\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk); // Apply the final choice of mask\n      this.drawFormatBits(msk); // Overwrite old format bits\n      this.isFunction = [];\n    }\n    /*-- Accessor methods --*/\n    // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    _createClass(QrCode, [{\n      key: \"getModule\",\n      value: function getModule(x, y) {\n        return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n      }\n      // Modified to expose modules for easy access\n    }, {\n      key: \"getModules\",\n      value: function getModules() {\n        return this.modules;\n      }\n      /*-- Private helper methods for constructor: Drawing function modules --*/\n      // Reads this object's version field, and draws and marks all function modules.\n    }, {\n      key: \"drawFunctionPatterns\",\n      value: function drawFunctionPatterns() {\n        // Draw horizontal and vertical timing patterns\n        for (var i = 0; i < this.size; i++) {\n          this.setFunctionModule(6, i, i % 2 == 0);\n          this.setFunctionModule(i, 6, i % 2 == 0);\n        }\n        // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)\n        this.drawFinderPattern(3, 3);\n        this.drawFinderPattern(this.size - 4, 3);\n        this.drawFinderPattern(3, this.size - 4);\n        // Draw numerous alignment patterns\n        var alignPatPos = this.getAlignmentPatternPositions();\n        var numAlign = alignPatPos.length;\n        for (var _i3 = 0; _i3 < numAlign; _i3++) {\n          for (var j = 0; j < numAlign; j++) {\n            // Don't draw on the three finder corners\n            if (!(_i3 == 0 && j == 0 || _i3 == 0 && j == numAlign - 1 || _i3 == numAlign - 1 && j == 0)) this.drawAlignmentPattern(alignPatPos[_i3], alignPatPos[j]);\n          }\n        }\n        // Draw configuration data\n        this.drawFormatBits(0); // Dummy mask value; overwritten later in the constructor\n        this.drawVersion();\n      }\n      // Draws two copies of the format bits (with its own error correction code)\n      // based on the given mask and this object's error correction level field.\n    }, {\n      key: \"drawFormatBits\",\n      value: function drawFormatBits(mask) {\n        // Calculate error correction code and pack bits\n        var data = this.errorCorrectionLevel.formatBits << 3 | mask; // errCorrLvl is uint2, mask is uint3\n        var rem = data;\n        for (var i = 0; i < 10; i++) rem = rem << 1 ^ (rem >>> 9) * 0x537;\n        var bits = (data << 10 | rem) ^ 0x5412; // uint15\n        assert(bits >>> 15 == 0);\n        // Draw first copy\n        for (var _i4 = 0; _i4 <= 5; _i4++) this.setFunctionModule(8, _i4, getBit(bits, _i4));\n        this.setFunctionModule(8, 7, getBit(bits, 6));\n        this.setFunctionModule(8, 8, getBit(bits, 7));\n        this.setFunctionModule(7, 8, getBit(bits, 8));\n        for (var _i5 = 9; _i5 < 15; _i5++) this.setFunctionModule(14 - _i5, 8, getBit(bits, _i5));\n        // Draw second copy\n        for (var _i6 = 0; _i6 < 8; _i6++) this.setFunctionModule(this.size - 1 - _i6, 8, getBit(bits, _i6));\n        for (var _i7 = 8; _i7 < 15; _i7++) this.setFunctionModule(8, this.size - 15 + _i7, getBit(bits, _i7));\n        this.setFunctionModule(8, this.size - 8, true); // Always dark\n      }\n      // Draws two copies of the version bits (with its own error correction code),\n      // based on this object's version field, iff 7 <= version <= 40.\n    }, {\n      key: \"drawVersion\",\n      value: function drawVersion() {\n        if (this.version < 7) return;\n        // Calculate error correction code and pack bits\n        var rem = this.version; // version is uint6, in the range [7, 40]\n        for (var i = 0; i < 12; i++) rem = rem << 1 ^ (rem >>> 11) * 0x1f25;\n        var bits = this.version << 12 | rem; // uint18\n        assert(bits >>> 18 == 0);\n        // Draw two copies\n        for (var _i8 = 0; _i8 < 18; _i8++) {\n          var color = getBit(bits, _i8);\n          var a = this.size - 11 + _i8 % 3;\n          var b = Math.floor(_i8 / 3);\n          this.setFunctionModule(a, b, color);\n          this.setFunctionModule(b, a, color);\n        }\n      }\n      // Draws a 9*9 finder pattern including the border separator,\n      // with the center module at (x, y). Modules can be out of bounds.\n    }, {\n      key: \"drawFinderPattern\",\n      value: function drawFinderPattern(x, y) {\n        for (var dy = -4; dy <= 4; dy++) {\n          for (var dx = -4; dx <= 4; dx++) {\n            var dist = Math.max(Math.abs(dx), Math.abs(dy)); // Chebyshev/infinity norm\n            var xx = x + dx;\n            var yy = y + dy;\n            if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size) this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n          }\n        }\n      }\n      // Draws a 5*5 alignment pattern, with the center module\n      // at (x, y). All modules must be in bounds.\n    }, {\n      key: \"drawAlignmentPattern\",\n      value: function drawAlignmentPattern(x, y) {\n        for (var dy = -2; dy <= 2; dy++) {\n          for (var dx = -2; dx <= 2; dx++) this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n        }\n      }\n      // Sets the color of a module and marks it as a function module.\n      // Only used by the constructor. Coordinates must be in bounds.\n    }, {\n      key: \"setFunctionModule\",\n      value: function setFunctionModule(x, y, isDark) {\n        this.modules[y][x] = isDark;\n        this.isFunction[y][x] = true;\n      }\n      /*-- Private helper methods for constructor: Codewords and masking --*/\n      // Returns a new byte string representing the given data with the appropriate error correction\n      // codewords appended to it, based on this object's version and error correction level.\n    }, {\n      key: \"addEccAndInterleave\",\n      value: function addEccAndInterleave(data) {\n        var ver = this.version;\n        var ecl = this.errorCorrectionLevel;\n        if (data.length != QrCode.getNumDataCodewords(ver, ecl)) throw new RangeError('Invalid argument');\n        // Calculate parameter numbers\n        var numBlocks = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n        var blockEccLen = QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n        var rawCodewords = Math.floor(QrCode.getNumRawDataModules(ver) / 8);\n        var numShortBlocks = numBlocks - rawCodewords % numBlocks;\n        var shortBlockLen = Math.floor(rawCodewords / numBlocks);\n        // Split data into blocks and append ECC to each block\n        var blocks = [];\n        var rsDiv = QrCode.reedSolomonComputeDivisor(blockEccLen);\n        for (var i = 0, k = 0; i < numBlocks; i++) {\n          var dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n          k += dat.length;\n          var ecc = QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n          if (i < numShortBlocks) dat.push(0);\n          blocks.push(dat.concat(ecc));\n        }\n        // Interleave (not concatenate) the bytes from every block into a single sequence\n        var result = [];\n        var _loop = function _loop(_i9) {\n          blocks.forEach(function (block, j) {\n            // Skip the padding byte in short blocks\n            if (_i9 != shortBlockLen - blockEccLen || j >= numShortBlocks) result.push(block[_i9]);\n          });\n        };\n        for (var _i9 = 0; _i9 < blocks[0].length; _i9++) {\n          _loop(_i9);\n        }\n        assert(result.length == rawCodewords);\n        return result;\n      }\n      // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n      // data area of this QR Code. Function modules need to be marked off before this is called.\n    }, {\n      key: \"drawCodewords\",\n      value: function drawCodewords(data) {\n        if (data.length != Math.floor(QrCode.getNumRawDataModules(this.version) / 8)) throw new RangeError('Invalid argument');\n        var i = 0; // Bit index into the data\n        // Do the funny zigzag scan\n        for (var right = this.size - 1; right >= 1; right -= 2) {\n          // Index of right column in each column pair\n          if (right == 6) right = 5;\n          for (var vert = 0; vert < this.size; vert++) {\n            // Vertical counter\n            for (var j = 0; j < 2; j++) {\n              var x = right - j; // Actual x coordinate\n              var upward = (right + 1 & 2) == 0;\n              var y = upward ? this.size - 1 - vert : vert; // Actual y coordinate\n              if (!this.isFunction[y][x] && i < data.length * 8) {\n                this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n                i++;\n              }\n              // If this QR Code has any remainder bits (0 to 7), they were assigned as\n              // 0/false/light by the constructor and are left unchanged by this method\n            }\n          }\n        }\n\n        assert(i == data.length * 8);\n      }\n      // XORs the codeword modules in this QR Code with the given mask pattern.\n      // The function modules must be marked and the codeword bits must be drawn\n      // before masking. Due to the arithmetic of XOR, calling applyMask() with\n      // the same mask value a second time will undo the mask. A final well-formed\n      // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    }, {\n      key: \"applyMask\",\n      value: function applyMask(mask) {\n        if (mask < 0 || mask > 7) throw new RangeError('Mask value out of range');\n        for (var y = 0; y < this.size; y++) {\n          for (var x = 0; x < this.size; x++) {\n            var invert = void 0;\n            switch (mask) {\n              case 0:\n                invert = (x + y) % 2 == 0;\n                break;\n              case 1:\n                invert = y % 2 == 0;\n                break;\n              case 2:\n                invert = x % 3 == 0;\n                break;\n              case 3:\n                invert = (x + y) % 3 == 0;\n                break;\n              case 4:\n                invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n                break;\n              case 5:\n                invert = x * y % 2 + x * y % 3 == 0;\n                break;\n              case 6:\n                invert = (x * y % 2 + x * y % 3) % 2 == 0;\n                break;\n              case 7:\n                invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n                break;\n              default:\n                throw new Error('Unreachable');\n            }\n            if (!this.isFunction[y][x] && invert) this.modules[y][x] = !this.modules[y][x];\n          }\n        }\n      }\n      // Calculates and returns the penalty score based on state of this QR Code's current modules.\n      // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    }, {\n      key: \"getPenaltyScore\",\n      value: function getPenaltyScore() {\n        var result = 0;\n        // Adjacent modules in row having same color, and finder-like patterns\n        for (var y = 0; y < this.size; y++) {\n          var runColor = false;\n          var runX = 0;\n          var runHistory = [0, 0, 0, 0, 0, 0, 0];\n          for (var x = 0; x < this.size; x++) {\n            if (this.modules[y][x] == runColor) {\n              runX++;\n              if (runX == 5) result += QrCode.PENALTY_N1;else if (runX > 5) result++;\n            } else {\n              this.finderPenaltyAddHistory(runX, runHistory);\n              if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\n              runColor = this.modules[y][x];\n              runX = 1;\n            }\n          }\n          result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * QrCode.PENALTY_N3;\n        }\n        // Adjacent modules in column having same color, and finder-like patterns\n        for (var _x = 0; _x < this.size; _x++) {\n          var _runColor = false;\n          var runY = 0;\n          var _runHistory = [0, 0, 0, 0, 0, 0, 0];\n          for (var _y = 0; _y < this.size; _y++) {\n            if (this.modules[_y][_x] == _runColor) {\n              runY++;\n              if (runY == 5) result += QrCode.PENALTY_N1;else if (runY > 5) result++;\n            } else {\n              this.finderPenaltyAddHistory(runY, _runHistory);\n              if (!_runColor) result += this.finderPenaltyCountPatterns(_runHistory) * QrCode.PENALTY_N3;\n              _runColor = this.modules[_y][_x];\n              runY = 1;\n            }\n          }\n          result += this.finderPenaltyTerminateAndCount(_runColor, runY, _runHistory) * QrCode.PENALTY_N3;\n        }\n        // 2*2 blocks of modules having same color\n        for (var _y2 = 0; _y2 < this.size - 1; _y2++) {\n          for (var _x2 = 0; _x2 < this.size - 1; _x2++) {\n            var color = this.modules[_y2][_x2];\n            if (color == this.modules[_y2][_x2 + 1] && color == this.modules[_y2 + 1][_x2] && color == this.modules[_y2 + 1][_x2 + 1]) result += QrCode.PENALTY_N2;\n          }\n        }\n        // Balance of dark and light modules\n        var dark = 0;\n        var _iterator = _createForOfIteratorHelper(this.modules),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var row = _step.value;\n            dark = row.reduce(function (sum, color) {\n              return sum + (color ? 1 : 0);\n            }, dark);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        var total = this.size * this.size; // Note that size is odd, so dark/total != 1/2\n        // Compute the smallest integer k >= 0 such that (45-5k)% <= dark/total <= (55+5k)%\n        var k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n        assert(0 <= k && k <= 9);\n        result += k * QrCode.PENALTY_N4;\n        assert(0 <= result && result <= 2568888); // Non-tight upper bound based on default values of PENALTY_N1, ..., N4\n        return result;\n      }\n      /*-- Private helper functions --*/\n      // Returns an ascending list of positions of alignment patterns for this version number.\n      // Each position is in the range [0,177), and are used on both the x and y axes.\n      // This could be implemented as lookup table of 40 variable-length lists of integers.\n    }, {\n      key: \"getAlignmentPatternPositions\",\n      value: function getAlignmentPatternPositions() {\n        if (this.version == 1) return [];else {\n          var numAlign = Math.floor(this.version / 7) + 2;\n          var step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n          var result = [6];\n          for (var pos = this.size - 7; result.length < numAlign; pos -= step) result.splice(1, 0, pos);\n          return result;\n        }\n      }\n      // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n      // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n      // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n    }, {\n      key: \"finderPenaltyCountPatterns\",\n      value:\n      // Can only be called immediately after a light run is added, and\n      // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n      function finderPenaltyCountPatterns(runHistory) {\n        var n = runHistory[1];\n        assert(n <= this.size * 3);\n        var core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n        return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n      }\n      // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    }, {\n      key: \"finderPenaltyTerminateAndCount\",\n      value: function finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n        if (currentRunColor) {\n          // Terminate dark run\n          this.finderPenaltyAddHistory(currentRunLength, runHistory);\n          currentRunLength = 0;\n        }\n        currentRunLength += this.size; // Add light border to final run\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        return this.finderPenaltyCountPatterns(runHistory);\n      }\n      // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    }, {\n      key: \"finderPenaltyAddHistory\",\n      value: function finderPenaltyAddHistory(currentRunLength, runHistory) {\n        if (runHistory[0] == 0) currentRunLength += this.size; // Add light border to initial run\n        runHistory.pop();\n        runHistory.unshift(currentRunLength);\n      }\n    }], [{\n      key: \"encodeText\",\n      value: /*-- Static factory functions (high level) --*/\n      // Returns a QR Code representing the given Unicode text string at the given error correction level.\n      // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n      // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n      // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n      // ecl argument if it can be done without increasing the version.\n      function encodeText(text, ecl) {\n        var segs = qrcodegen.QrSegment.makeSegments(text);\n        return QrCode.encodeSegments(segs, ecl);\n      }\n      // Returns a QR Code representing the given binary data at the given error correction level.\n      // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n      // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n      // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n    }, {\n      key: \"encodeBinary\",\n      value: function encodeBinary(data, ecl) {\n        var seg = qrcodegen.QrSegment.makeBytes(data);\n        return QrCode.encodeSegments([seg], ecl);\n      }\n      /*-- Static factory functions (mid level) --*/\n      // Returns a QR Code representing the given segments with the given encoding parameters.\n      // The smallest possible QR Code version within the given range is automatically\n      // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n      // may be higher than the ecl argument if it can be done without increasing the\n      // version. The mask number is either between 0 to 7 (inclusive) to force that\n      // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n      // This function allows the user to create a custom sequence of segments that switches\n      // between modes (such as alphanumeric and byte) to encode text in less space.\n      // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n    }, {\n      key: \"encodeSegments\",\n      value: function encodeSegments(segs, ecl) {\n        var minVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n        var maxVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 40;\n        var mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n        var boostEcl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n        if (!(QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= QrCode.MAX_VERSION) || mask < -1 || mask > 7) throw new RangeError('Invalid value');\n        // Find the minimal version number to use\n        var version;\n        var dataUsedBits;\n        for (version = minVersion;; version++) {\n          var _dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8; // Number of data bits available\n          var usedBits = QrSegment.getTotalBits(segs, version);\n          if (usedBits <= _dataCapacityBits) {\n            dataUsedBits = usedBits;\n            break; // This version number is found to be suitable\n          }\n\n          if (version >= maxVersion)\n            // All versions in the range could not fit the given data\n            throw new RangeError('Data too long');\n        }\n        // Increase the error correction level while the data still fits in the current version number\n        for (var _i10 = 0, _arr = [QrCode.Ecc.MEDIUM, QrCode.Ecc.QUARTILE, QrCode.Ecc.HIGH]; _i10 < _arr.length; _i10++) {\n          var newEcl = _arr[_i10];\n          // From low to high\n          if (boostEcl && dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8) ecl = newEcl;\n        }\n        // Concatenate all segments to create the data bit string\n        var bb = [];\n        var _iterator2 = _createForOfIteratorHelper(segs),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var seg = _step2.value;\n            appendBits(seg.mode.modeBits, 4, bb);\n            appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n            var _iterator3 = _createForOfIteratorHelper(seg.getData()),\n              _step3;\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var b = _step3.value;\n                bb.push(b);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        assert(bb.length == dataUsedBits);\n        // Add terminator and pad up to a byte if applicable\n        var dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8;\n        assert(bb.length <= dataCapacityBits);\n        appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n        appendBits(0, (8 - bb.length % 8) % 8, bb);\n        assert(bb.length % 8 == 0);\n        // Pad with alternating bytes until data capacity is reached\n        for (var padByte = 0xec; bb.length < dataCapacityBits; padByte ^= 0xec ^ 0x11) appendBits(padByte, 8, bb);\n        // Pack bits into bytes in big endian\n        var dataCodewords = [];\n        while (dataCodewords.length * 8 < bb.length) dataCodewords.push(0);\n        bb.forEach(function (b, i) {\n          return dataCodewords[i >>> 3] |= b << 7 - (i & 7);\n        });\n        // Create the QR Code object\n        return new QrCode(version, ecl, dataCodewords, mask);\n      }\n    }, {\n      key: \"getNumRawDataModules\",\n      value: function getNumRawDataModules(ver) {\n        if (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION) throw new RangeError('Version number out of range');\n        var result = (16 * ver + 128) * ver + 64;\n        if (ver >= 2) {\n          var numAlign = Math.floor(ver / 7) + 2;\n          result -= (25 * numAlign - 10) * numAlign - 55;\n          if (ver >= 7) result -= 36;\n        }\n        assert(208 <= result && result <= 29648);\n        return result;\n      }\n      // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n      // QR Code of the given version number and error correction level, with remainder bits discarded.\n      // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n    }, {\n      key: \"getNumDataCodewords\",\n      value: function getNumDataCodewords(ver, ecl) {\n        return Math.floor(QrCode.getNumRawDataModules(ver) / 8) - QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      }\n      // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n      // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n    }, {\n      key: \"reedSolomonComputeDivisor\",\n      value: function reedSolomonComputeDivisor(degree) {\n        if (degree < 1 || degree > 255) throw new RangeError('Degree out of range');\n        // Polynomial coefficients are stored from highest to lowest power, excluding the leading term which is always 1.\n        // For example the polynomial x^3 + 255x^2 + 8x + 93 is stored as the uint8 array [255, 8, 93].\n        var result = [];\n        for (var i = 0; i < degree - 1; i++) result.push(0);\n        result.push(1); // Start off with the monomial x^0\n        // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),\n        // and drop the highest monomial term which is always 1x^degree.\n        // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).\n        var root = 1;\n        for (var _i11 = 0; _i11 < degree; _i11++) {\n          // Multiply the current product by (x - r^i)\n          for (var j = 0; j < result.length; j++) {\n            result[j] = QrCode.reedSolomonMultiply(result[j], root);\n            if (j + 1 < result.length) result[j] ^= result[j + 1];\n          }\n          root = QrCode.reedSolomonMultiply(root, 0x02);\n        }\n        return result;\n      }\n      // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n    }, {\n      key: \"reedSolomonComputeRemainder\",\n      value: function reedSolomonComputeRemainder(data, divisor) {\n        var result = divisor.map(function (_) {\n          return 0;\n        });\n        var _iterator4 = _createForOfIteratorHelper(data),\n          _step4;\n        try {\n          var _loop2 = function _loop2() {\n            var b = _step4.value;\n            // Polynomial division\n            var factor = b ^ result.shift();\n            result.push(0);\n            divisor.forEach(function (coef, i) {\n              return result[i] ^= QrCode.reedSolomonMultiply(coef, factor);\n            });\n          };\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            _loop2();\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        return result;\n      }\n      // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n      // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n    }, {\n      key: \"reedSolomonMultiply\",\n      value: function reedSolomonMultiply(x, y) {\n        if (x >>> 8 != 0 || y >>> 8 != 0) throw new RangeError('Byte out of range');\n        // Russian peasant multiplication\n        var z = 0;\n        for (var i = 7; i >= 0; i--) {\n          z = z << 1 ^ (z >>> 7) * 0x11d;\n          z ^= (y >>> i & 1) * x;\n        }\n        assert(z >>> 8 == 0);\n        return z;\n      }\n    }]);\n    return QrCode;\n  }();\n  /*-- Constants and tables --*/\n  // The minimum version number supported in the QR Code Model 2 standard.\n  QrCode.MIN_VERSION = 1;\n  // The maximum version number supported in the QR Code Model 2 standard.\n  QrCode.MAX_VERSION = 40;\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30] // High\n  ];\n\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25], [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49], [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68], [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81] // High\n  ];\n\n  qrcodegen.QrCode = QrCode;\n  // Appends the given number of low-order bits of the given value\n  // to the given buffer. Requires 0 <= len <= 31 and 0 <= val < 2^len.\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0) throw new RangeError('Value out of range');\n    for (var i = len - 1; i >= 0; i-- // Append bit by bit\n    ) bb.push(val >>> i & 1);\n  }\n  // Returns true iff the i'th bit of x is set to 1.\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  // Throws an exception if the given condition is false.\n  function assert(cond) {\n    if (!cond) throw new Error('Assertion error');\n  }\n  /*---- Data segment class ----*/\n  /*\n   * A segment of character/binary/control data in a QR Code symbol.\n   * Instances of this class are immutable.\n   * The mid-level way to create a segment is to take the payload data\n   * and call a static factory function such as QrSegment.makeNumeric().\n   * The low-level way to create a segment is to custom-make the bit buffer\n   * and call the QrSegment() constructor with appropriate values.\n   * This segment class imposes no length restrictions, but QR Codes have restrictions.\n   * Even in the most favorable conditions, a QR Code can only hold 7089 characters of data.\n   * Any segment longer than this is meaningless for the purpose of generating QR Codes.\n   */\n  var QrSegment = /*#__PURE__*/function () {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    function QrSegment(\n    // The mode indicator of this segment.\n    mode,\n    // The length of this segment's unencoded data. Measured in characters for\n    // numeric/alphanumeric/kanji mode, bytes for byte mode, and 0 for ECI mode.\n    // Always zero or positive. Not the same as the data's bit length.\n    numChars,\n    // The data bits of this segment. Accessed through getData().\n    bitData) {\n      _classCallCheck(this, QrSegment);\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0) throw new RangeError('Invalid argument');\n      this.bitData = bitData.slice(); // Make defensive copy\n    }\n    /*-- Methods --*/\n    // Returns a new copy of the data bits of this segment.\n    _createClass(QrSegment, [{\n      key: \"getData\",\n      value: function getData() {\n        return this.bitData.slice(); // Make defensive copy\n      }\n      // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n      // the given version. The result is infinity if a segment has too many characters to fit its length field.\n    }], [{\n      key: \"makeBytes\",\n      value: /*-- Static factory functions (mid level) --*/\n      // Returns a segment representing the given binary data encoded in\n      // byte mode. All input byte arrays are acceptable. Any text string\n      // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n      function makeBytes(data) {\n        var bb = [];\n        var _iterator5 = _createForOfIteratorHelper(data),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var b = _step5.value;\n            appendBits(b, 8, bb);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n        return new QrSegment(QrSegment.Mode.BYTE, data.length, bb);\n      }\n      // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n    }, {\n      key: \"makeNumeric\",\n      value: function makeNumeric(digits) {\n        if (!QrSegment.isNumeric(digits)) throw new RangeError('String contains non-numeric characters');\n        var bb = [];\n        for (var i = 0; i < digits.length;) {\n          // Consume up to 3 digits per iteration\n          var n = Math.min(digits.length - i, 3);\n          appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n          i += n;\n        }\n        return new QrSegment(QrSegment.Mode.NUMERIC, digits.length, bb);\n      }\n      // Returns a segment representing the given text string encoded in alphanumeric mode.\n      // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n      // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    }, {\n      key: \"makeAlphanumeric\",\n      value: function makeAlphanumeric(text) {\n        if (!QrSegment.isAlphanumeric(text)) throw new RangeError('String contains unencodable characters in alphanumeric mode');\n        var bb = [];\n        var i;\n        for (i = 0; i + 2 <= text.length; i += 2) {\n          // Process groups of 2\n          var temp = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n          temp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n          appendBits(temp, 11, bb);\n        }\n        if (i < text.length)\n          // 1 character remaining\n          appendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n        return new QrSegment(QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n      }\n      // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n      // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n    }, {\n      key: \"makeSegments\",\n      value: function makeSegments(text) {\n        // Select the most efficient segment encoding automatically\n        if (text == '') return [];else if (QrSegment.isNumeric(text)) return [QrSegment.makeNumeric(text)];else if (QrSegment.isAlphanumeric(text)) return [QrSegment.makeAlphanumeric(text)];else return [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))];\n      }\n      // Returns a segment representing an Extended Channel Interpretation\n      // (ECI) designator with the given assignment value.\n    }, {\n      key: \"makeEci\",\n      value: function makeEci(assignVal) {\n        var bb = [];\n        if (assignVal < 0) throw new RangeError('ECI assignment value out of range');else if (assignVal < 1 << 7) appendBits(assignVal, 8, bb);else if (assignVal < 1 << 14) {\n          appendBits(2, 2, bb);\n          appendBits(assignVal, 14, bb);\n        } else if (assignVal < 1000000) {\n          appendBits(6, 3, bb);\n          appendBits(assignVal, 21, bb);\n        } else throw new RangeError('ECI assignment value out of range');\n        return new QrSegment(QrSegment.Mode.ECI, 0, bb);\n      }\n      // Tests whether the given string can be encoded as a segment in numeric mode.\n      // A string is encodable iff each character is in the range 0 to 9.\n    }, {\n      key: \"isNumeric\",\n      value: function isNumeric(text) {\n        return QrSegment.NUMERIC_REGEX.test(text);\n      }\n      // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n      // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n      // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    }, {\n      key: \"isAlphanumeric\",\n      value: function isAlphanumeric(text) {\n        return QrSegment.ALPHANUMERIC_REGEX.test(text);\n      }\n    }, {\n      key: \"getTotalBits\",\n      value: function getTotalBits(segs, version) {\n        var result = 0;\n        var _iterator6 = _createForOfIteratorHelper(segs),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var seg = _step6.value;\n            var ccbits = seg.mode.numCharCountBits(version);\n            if (seg.numChars >= 1 << ccbits) return Infinity; // The segment's length doesn't fit the field's bit width\n            result += 4 + ccbits + seg.bitData.length;\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n        return result;\n      }\n      // Returns a new array of bytes representing the given string encoded in UTF-8.\n    }, {\n      key: \"toUtf8ByteArray\",\n      value: function toUtf8ByteArray(str) {\n        str = encodeURI(str);\n        var result = [];\n        for (var i = 0; i < str.length; i++) {\n          if (str.charAt(i) != '%') result.push(str.charCodeAt(i));else {\n            result.push(parseInt(str.substring(i + 1, i + 3), 16));\n            i += 2;\n          }\n        }\n        return result;\n      }\n    }]);\n    return QrSegment;\n  }();\n  /*-- Constants --*/\n  // Describes precisely all strings that are encodable in numeric mode.\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  QrSegment.ALPHANUMERIC_CHARSET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';\n  qrcodegen.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n/*---- Public helper enumeration ----*/\n(function (qrcodegen) {\n  var QrCode;\n  (function (QrCode) {\n    /*\n     * The error correction level in a QR Code symbol. Immutable.\n     */\n    var Ecc = /*#__PURE__*/_createClass( /*-- Constructor and fields --*/\n    function Ecc(\n    // In the range 0 to 3 (unsigned 2-bit integer).\n    ordinal,\n    // (Package-private) In the range 0 to 3 (unsigned 2-bit integer).\n    formatBits) {\n      _classCallCheck(this, Ecc);\n      this.ordinal = ordinal;\n      this.formatBits = formatBits;\n    });\n    /*-- Constants --*/\n    Ecc.LOW = new Ecc(0, 1); // The QR Code can tolerate about  7% erroneous codewords\n    Ecc.MEDIUM = new Ecc(1, 0); // The QR Code can tolerate about 15% erroneous codewords\n    Ecc.QUARTILE = new Ecc(2, 3); // The QR Code can tolerate about 25% erroneous codewords\n    Ecc.HIGH = new Ecc(3, 2); // The QR Code can tolerate about 30% erroneous codewords\n    QrCode.Ecc = Ecc;\n  })(QrCode = qrcodegen.QrCode || (qrcodegen.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n/*---- Public helper enumeration ----*/\n(function (qrcodegen) {\n  var QrSegment;\n  (function (QrSegment) {\n    /*\n     * Describes how a segment's data bits are interpreted. Immutable.\n     */\n    var Mode = /*#__PURE__*/function () {\n      /*-- Constructor and fields --*/\n      function Mode(\n      // The mode indicator bits, which is a uint4 value (range 0 to 15).\n      modeBits,\n      // Number of character count bits for three different version ranges.\n      numBitsCharCount) {\n        _classCallCheck(this, Mode);\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      /*-- Method --*/\n      // (Package-private) Returns the bit width of the character count field for a segment in\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n      _createClass(Mode, [{\n        key: \"numCharCountBits\",\n        value: function numCharCountBits(ver) {\n          return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n        }\n      }]);\n      return Mode;\n    }();\n    /*-- Constants --*/\n    Mode.NUMERIC = new Mode(0x1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new Mode(0x2, [9, 11, 13]);\n    Mode.BYTE = new Mode(0x4, [8, 16, 16]);\n    Mode.KANJI = new Mode(0x8, [8, 10, 12]);\n    Mode.ECI = new Mode(0x7, [0, 0, 0]);\n    QrSegment.Mode = Mode;\n  })(QrSegment = qrcodegen.QrSegment || (qrcodegen.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\n// Modification to export for actual use\nexport default qrcodegen;","map":{"version":3,"names":["_createForOfIteratorHelper","_classCallCheck","_createClass","qrcodegen","QrCode","version","errorCorrectionLevel","dataCodewords","msk","modules","isFunction","MIN_VERSION","MAX_VERSION","RangeError","size","row","i","push","_i","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","_i2","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","key","value","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","length","_i3","j","drawAlignmentPattern","drawVersion","data","formatBits","rem","bits","_i4","getBit","_i5","_i6","_i7","_i8","color","a","b","Math","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","ecl","getNumDataCodewords","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","_loop","_i9","forEach","block","right","vert","upward","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","_x","_runColor","runY","_runHistory","_y","_y2","_x2","PENALTY_N2","dark","_iterator","_step","s","n","done","reduce","sum","err","e","f","total","ceil","PENALTY_N4","step","pos","splice","core","currentRunColor","currentRunLength","pop","unshift","encodeText","text","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","seg","makeBytes","minVersion","arguments","undefined","maxVersion","boostEcl","dataUsedBits","_dataCapacityBits","usedBits","getTotalBits","_i10","_arr","Ecc","MEDIUM","QUARTILE","HIGH","newEcl","bb","_iterator2","_step2","appendBits","mode","modeBits","numChars","numCharCountBits","_iterator3","getData","_step3","dataCapacityBits","min","padByte","degree","root","_i11","reedSolomonMultiply","divisor","map","_","_iterator4","_step4","_loop2","factor","shift","coef","z","val","len","cond","bitData","_iterator5","_step5","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substring","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","indexOf","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","_iterator6","_step6","ccbits","Infinity","str","encodeURI","charCodeAt","LOW","numBitsCharCount","KANJI"],"sources":["D:/Desktop/Code/CcAgSearch/ccso-frontend/node_modules/ant-design-vue/es/qrcode/qrcodegen.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-namespace */\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\n'use strict';\n\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar qrcodegen;\n(function (qrcodegen) {\n  /*---- QR Code symbol class ----*/\n  /*\n   * A QR Code symbol, which is a type of two-dimension barcode.\n   * Invented by Denso Wave and described in the ISO/IEC 18004 standard.\n   * Instances of this class represent an immutable square grid of dark and light cells.\n   * The class provides static factory functions to create a QR Code from text or binary data.\n   * The class covers the QR Code Model 2 specification, supporting all versions (sizes)\n   * from 1 to 40, all 4 error correction levels, and 4 character encoding modes.\n   *\n   * Ways to create a QR Code object:\n   * - High level: Take the payload data and call QrCode.encodeText() or QrCode.encodeBinary().\n   * - Mid level: Custom-make the list of segments and call QrCode.encodeSegments().\n   * - Low level: Custom-make the array of data codeword bytes (including\n   *   segment headers and final padding, excluding error correction codewords),\n   *   supply the appropriate version number, and call the QrCode() constructor.\n   * (Note that all ways require supplying the desired error correction level.)\n   */\n  var QrCode = /*#__PURE__*/function () {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    function QrCode(\n    // The version number of this QR Code, which is between 1 and 40 (inclusive).\n    // This determines the size of this barcode.\n    version,\n    // The error correction level used in this QR Code.\n    errorCorrectionLevel, dataCodewords, msk) {\n      _classCallCheck(this, QrCode);\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      // The modules of this QR Code (false = light, true = dark).\n      // Immutable after constructor finishes. Accessed through getModule().\n      this.modules = [];\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n      this.isFunction = [];\n      // Check scalar arguments\n      if (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION) throw new RangeError('Version value out of range');\n      if (msk < -1 || msk > 7) throw new RangeError('Mask value out of range');\n      this.size = version * 4 + 17;\n      // Initialize both grids to be size*size arrays of Boolean false\n      var row = [];\n      for (var i = 0; i < this.size; i++) row.push(false);\n      for (var _i = 0; _i < this.size; _i++) {\n        this.modules.push(row.slice()); // Initially all light\n        this.isFunction.push(row.slice());\n      }\n      // Compute ECC, draw modules\n      this.drawFunctionPatterns();\n      var allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      // Do masking\n      if (msk == -1) {\n        // Automatically choose best mask\n        var minPenalty = 1000000000;\n        for (var _i2 = 0; _i2 < 8; _i2++) {\n          this.applyMask(_i2);\n          this.drawFormatBits(_i2);\n          var penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = _i2;\n            minPenalty = penalty;\n          }\n          this.applyMask(_i2); // Undoes the mask due to XOR\n        }\n      }\n\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk); // Apply the final choice of mask\n      this.drawFormatBits(msk); // Overwrite old format bits\n      this.isFunction = [];\n    }\n    /*-- Accessor methods --*/\n    // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    _createClass(QrCode, [{\n      key: \"getModule\",\n      value: function getModule(x, y) {\n        return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n      }\n      // Modified to expose modules for easy access\n    }, {\n      key: \"getModules\",\n      value: function getModules() {\n        return this.modules;\n      }\n      /*-- Private helper methods for constructor: Drawing function modules --*/\n      // Reads this object's version field, and draws and marks all function modules.\n    }, {\n      key: \"drawFunctionPatterns\",\n      value: function drawFunctionPatterns() {\n        // Draw horizontal and vertical timing patterns\n        for (var i = 0; i < this.size; i++) {\n          this.setFunctionModule(6, i, i % 2 == 0);\n          this.setFunctionModule(i, 6, i % 2 == 0);\n        }\n        // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)\n        this.drawFinderPattern(3, 3);\n        this.drawFinderPattern(this.size - 4, 3);\n        this.drawFinderPattern(3, this.size - 4);\n        // Draw numerous alignment patterns\n        var alignPatPos = this.getAlignmentPatternPositions();\n        var numAlign = alignPatPos.length;\n        for (var _i3 = 0; _i3 < numAlign; _i3++) {\n          for (var j = 0; j < numAlign; j++) {\n            // Don't draw on the three finder corners\n            if (!(_i3 == 0 && j == 0 || _i3 == 0 && j == numAlign - 1 || _i3 == numAlign - 1 && j == 0)) this.drawAlignmentPattern(alignPatPos[_i3], alignPatPos[j]);\n          }\n        }\n        // Draw configuration data\n        this.drawFormatBits(0); // Dummy mask value; overwritten later in the constructor\n        this.drawVersion();\n      }\n      // Draws two copies of the format bits (with its own error correction code)\n      // based on the given mask and this object's error correction level field.\n    }, {\n      key: \"drawFormatBits\",\n      value: function drawFormatBits(mask) {\n        // Calculate error correction code and pack bits\n        var data = this.errorCorrectionLevel.formatBits << 3 | mask; // errCorrLvl is uint2, mask is uint3\n        var rem = data;\n        for (var i = 0; i < 10; i++) rem = rem << 1 ^ (rem >>> 9) * 0x537;\n        var bits = (data << 10 | rem) ^ 0x5412; // uint15\n        assert(bits >>> 15 == 0);\n        // Draw first copy\n        for (var _i4 = 0; _i4 <= 5; _i4++) this.setFunctionModule(8, _i4, getBit(bits, _i4));\n        this.setFunctionModule(8, 7, getBit(bits, 6));\n        this.setFunctionModule(8, 8, getBit(bits, 7));\n        this.setFunctionModule(7, 8, getBit(bits, 8));\n        for (var _i5 = 9; _i5 < 15; _i5++) this.setFunctionModule(14 - _i5, 8, getBit(bits, _i5));\n        // Draw second copy\n        for (var _i6 = 0; _i6 < 8; _i6++) this.setFunctionModule(this.size - 1 - _i6, 8, getBit(bits, _i6));\n        for (var _i7 = 8; _i7 < 15; _i7++) this.setFunctionModule(8, this.size - 15 + _i7, getBit(bits, _i7));\n        this.setFunctionModule(8, this.size - 8, true); // Always dark\n      }\n      // Draws two copies of the version bits (with its own error correction code),\n      // based on this object's version field, iff 7 <= version <= 40.\n    }, {\n      key: \"drawVersion\",\n      value: function drawVersion() {\n        if (this.version < 7) return;\n        // Calculate error correction code and pack bits\n        var rem = this.version; // version is uint6, in the range [7, 40]\n        for (var i = 0; i < 12; i++) rem = rem << 1 ^ (rem >>> 11) * 0x1f25;\n        var bits = this.version << 12 | rem; // uint18\n        assert(bits >>> 18 == 0);\n        // Draw two copies\n        for (var _i8 = 0; _i8 < 18; _i8++) {\n          var color = getBit(bits, _i8);\n          var a = this.size - 11 + _i8 % 3;\n          var b = Math.floor(_i8 / 3);\n          this.setFunctionModule(a, b, color);\n          this.setFunctionModule(b, a, color);\n        }\n      }\n      // Draws a 9*9 finder pattern including the border separator,\n      // with the center module at (x, y). Modules can be out of bounds.\n    }, {\n      key: \"drawFinderPattern\",\n      value: function drawFinderPattern(x, y) {\n        for (var dy = -4; dy <= 4; dy++) {\n          for (var dx = -4; dx <= 4; dx++) {\n            var dist = Math.max(Math.abs(dx), Math.abs(dy)); // Chebyshev/infinity norm\n            var xx = x + dx;\n            var yy = y + dy;\n            if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size) this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n          }\n        }\n      }\n      // Draws a 5*5 alignment pattern, with the center module\n      // at (x, y). All modules must be in bounds.\n    }, {\n      key: \"drawAlignmentPattern\",\n      value: function drawAlignmentPattern(x, y) {\n        for (var dy = -2; dy <= 2; dy++) {\n          for (var dx = -2; dx <= 2; dx++) this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n        }\n      }\n      // Sets the color of a module and marks it as a function module.\n      // Only used by the constructor. Coordinates must be in bounds.\n    }, {\n      key: \"setFunctionModule\",\n      value: function setFunctionModule(x, y, isDark) {\n        this.modules[y][x] = isDark;\n        this.isFunction[y][x] = true;\n      }\n      /*-- Private helper methods for constructor: Codewords and masking --*/\n      // Returns a new byte string representing the given data with the appropriate error correction\n      // codewords appended to it, based on this object's version and error correction level.\n    }, {\n      key: \"addEccAndInterleave\",\n      value: function addEccAndInterleave(data) {\n        var ver = this.version;\n        var ecl = this.errorCorrectionLevel;\n        if (data.length != QrCode.getNumDataCodewords(ver, ecl)) throw new RangeError('Invalid argument');\n        // Calculate parameter numbers\n        var numBlocks = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n        var blockEccLen = QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n        var rawCodewords = Math.floor(QrCode.getNumRawDataModules(ver) / 8);\n        var numShortBlocks = numBlocks - rawCodewords % numBlocks;\n        var shortBlockLen = Math.floor(rawCodewords / numBlocks);\n        // Split data into blocks and append ECC to each block\n        var blocks = [];\n        var rsDiv = QrCode.reedSolomonComputeDivisor(blockEccLen);\n        for (var i = 0, k = 0; i < numBlocks; i++) {\n          var dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n          k += dat.length;\n          var ecc = QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n          if (i < numShortBlocks) dat.push(0);\n          blocks.push(dat.concat(ecc));\n        }\n        // Interleave (not concatenate) the bytes from every block into a single sequence\n        var result = [];\n        var _loop = function _loop(_i9) {\n          blocks.forEach(function (block, j) {\n            // Skip the padding byte in short blocks\n            if (_i9 != shortBlockLen - blockEccLen || j >= numShortBlocks) result.push(block[_i9]);\n          });\n        };\n        for (var _i9 = 0; _i9 < blocks[0].length; _i9++) {\n          _loop(_i9);\n        }\n        assert(result.length == rawCodewords);\n        return result;\n      }\n      // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n      // data area of this QR Code. Function modules need to be marked off before this is called.\n    }, {\n      key: \"drawCodewords\",\n      value: function drawCodewords(data) {\n        if (data.length != Math.floor(QrCode.getNumRawDataModules(this.version) / 8)) throw new RangeError('Invalid argument');\n        var i = 0; // Bit index into the data\n        // Do the funny zigzag scan\n        for (var right = this.size - 1; right >= 1; right -= 2) {\n          // Index of right column in each column pair\n          if (right == 6) right = 5;\n          for (var vert = 0; vert < this.size; vert++) {\n            // Vertical counter\n            for (var j = 0; j < 2; j++) {\n              var x = right - j; // Actual x coordinate\n              var upward = (right + 1 & 2) == 0;\n              var y = upward ? this.size - 1 - vert : vert; // Actual y coordinate\n              if (!this.isFunction[y][x] && i < data.length * 8) {\n                this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n                i++;\n              }\n              // If this QR Code has any remainder bits (0 to 7), they were assigned as\n              // 0/false/light by the constructor and are left unchanged by this method\n            }\n          }\n        }\n\n        assert(i == data.length * 8);\n      }\n      // XORs the codeword modules in this QR Code with the given mask pattern.\n      // The function modules must be marked and the codeword bits must be drawn\n      // before masking. Due to the arithmetic of XOR, calling applyMask() with\n      // the same mask value a second time will undo the mask. A final well-formed\n      // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    }, {\n      key: \"applyMask\",\n      value: function applyMask(mask) {\n        if (mask < 0 || mask > 7) throw new RangeError('Mask value out of range');\n        for (var y = 0; y < this.size; y++) {\n          for (var x = 0; x < this.size; x++) {\n            var invert = void 0;\n            switch (mask) {\n              case 0:\n                invert = (x + y) % 2 == 0;\n                break;\n              case 1:\n                invert = y % 2 == 0;\n                break;\n              case 2:\n                invert = x % 3 == 0;\n                break;\n              case 3:\n                invert = (x + y) % 3 == 0;\n                break;\n              case 4:\n                invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n                break;\n              case 5:\n                invert = x * y % 2 + x * y % 3 == 0;\n                break;\n              case 6:\n                invert = (x * y % 2 + x * y % 3) % 2 == 0;\n                break;\n              case 7:\n                invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n                break;\n              default:\n                throw new Error('Unreachable');\n            }\n            if (!this.isFunction[y][x] && invert) this.modules[y][x] = !this.modules[y][x];\n          }\n        }\n      }\n      // Calculates and returns the penalty score based on state of this QR Code's current modules.\n      // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    }, {\n      key: \"getPenaltyScore\",\n      value: function getPenaltyScore() {\n        var result = 0;\n        // Adjacent modules in row having same color, and finder-like patterns\n        for (var y = 0; y < this.size; y++) {\n          var runColor = false;\n          var runX = 0;\n          var runHistory = [0, 0, 0, 0, 0, 0, 0];\n          for (var x = 0; x < this.size; x++) {\n            if (this.modules[y][x] == runColor) {\n              runX++;\n              if (runX == 5) result += QrCode.PENALTY_N1;else if (runX > 5) result++;\n            } else {\n              this.finderPenaltyAddHistory(runX, runHistory);\n              if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\n              runColor = this.modules[y][x];\n              runX = 1;\n            }\n          }\n          result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * QrCode.PENALTY_N3;\n        }\n        // Adjacent modules in column having same color, and finder-like patterns\n        for (var _x = 0; _x < this.size; _x++) {\n          var _runColor = false;\n          var runY = 0;\n          var _runHistory = [0, 0, 0, 0, 0, 0, 0];\n          for (var _y = 0; _y < this.size; _y++) {\n            if (this.modules[_y][_x] == _runColor) {\n              runY++;\n              if (runY == 5) result += QrCode.PENALTY_N1;else if (runY > 5) result++;\n            } else {\n              this.finderPenaltyAddHistory(runY, _runHistory);\n              if (!_runColor) result += this.finderPenaltyCountPatterns(_runHistory) * QrCode.PENALTY_N3;\n              _runColor = this.modules[_y][_x];\n              runY = 1;\n            }\n          }\n          result += this.finderPenaltyTerminateAndCount(_runColor, runY, _runHistory) * QrCode.PENALTY_N3;\n        }\n        // 2*2 blocks of modules having same color\n        for (var _y2 = 0; _y2 < this.size - 1; _y2++) {\n          for (var _x2 = 0; _x2 < this.size - 1; _x2++) {\n            var color = this.modules[_y2][_x2];\n            if (color == this.modules[_y2][_x2 + 1] && color == this.modules[_y2 + 1][_x2] && color == this.modules[_y2 + 1][_x2 + 1]) result += QrCode.PENALTY_N2;\n          }\n        }\n        // Balance of dark and light modules\n        var dark = 0;\n        var _iterator = _createForOfIteratorHelper(this.modules),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var row = _step.value;\n            dark = row.reduce(function (sum, color) {\n              return sum + (color ? 1 : 0);\n            }, dark);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        var total = this.size * this.size; // Note that size is odd, so dark/total != 1/2\n        // Compute the smallest integer k >= 0 such that (45-5k)% <= dark/total <= (55+5k)%\n        var k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n        assert(0 <= k && k <= 9);\n        result += k * QrCode.PENALTY_N4;\n        assert(0 <= result && result <= 2568888); // Non-tight upper bound based on default values of PENALTY_N1, ..., N4\n        return result;\n      }\n      /*-- Private helper functions --*/\n      // Returns an ascending list of positions of alignment patterns for this version number.\n      // Each position is in the range [0,177), and are used on both the x and y axes.\n      // This could be implemented as lookup table of 40 variable-length lists of integers.\n    }, {\n      key: \"getAlignmentPatternPositions\",\n      value: function getAlignmentPatternPositions() {\n        if (this.version == 1) return [];else {\n          var numAlign = Math.floor(this.version / 7) + 2;\n          var step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n          var result = [6];\n          for (var pos = this.size - 7; result.length < numAlign; pos -= step) result.splice(1, 0, pos);\n          return result;\n        }\n      }\n      // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n      // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n      // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n    }, {\n      key: \"finderPenaltyCountPatterns\",\n      value:\n      // Can only be called immediately after a light run is added, and\n      // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n      function finderPenaltyCountPatterns(runHistory) {\n        var n = runHistory[1];\n        assert(n <= this.size * 3);\n        var core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n        return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n      }\n      // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    }, {\n      key: \"finderPenaltyTerminateAndCount\",\n      value: function finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n        if (currentRunColor) {\n          // Terminate dark run\n          this.finderPenaltyAddHistory(currentRunLength, runHistory);\n          currentRunLength = 0;\n        }\n        currentRunLength += this.size; // Add light border to final run\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        return this.finderPenaltyCountPatterns(runHistory);\n      }\n      // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    }, {\n      key: \"finderPenaltyAddHistory\",\n      value: function finderPenaltyAddHistory(currentRunLength, runHistory) {\n        if (runHistory[0] == 0) currentRunLength += this.size; // Add light border to initial run\n        runHistory.pop();\n        runHistory.unshift(currentRunLength);\n      }\n    }], [{\n      key: \"encodeText\",\n      value: /*-- Static factory functions (high level) --*/\n      // Returns a QR Code representing the given Unicode text string at the given error correction level.\n      // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n      // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n      // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n      // ecl argument if it can be done without increasing the version.\n      function encodeText(text, ecl) {\n        var segs = qrcodegen.QrSegment.makeSegments(text);\n        return QrCode.encodeSegments(segs, ecl);\n      }\n      // Returns a QR Code representing the given binary data at the given error correction level.\n      // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n      // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n      // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n    }, {\n      key: \"encodeBinary\",\n      value: function encodeBinary(data, ecl) {\n        var seg = qrcodegen.QrSegment.makeBytes(data);\n        return QrCode.encodeSegments([seg], ecl);\n      }\n      /*-- Static factory functions (mid level) --*/\n      // Returns a QR Code representing the given segments with the given encoding parameters.\n      // The smallest possible QR Code version within the given range is automatically\n      // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n      // may be higher than the ecl argument if it can be done without increasing the\n      // version. The mask number is either between 0 to 7 (inclusive) to force that\n      // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n      // This function allows the user to create a custom sequence of segments that switches\n      // between modes (such as alphanumeric and byte) to encode text in less space.\n      // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n    }, {\n      key: \"encodeSegments\",\n      value: function encodeSegments(segs, ecl) {\n        var minVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n        var maxVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 40;\n        var mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n        var boostEcl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n        if (!(QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= QrCode.MAX_VERSION) || mask < -1 || mask > 7) throw new RangeError('Invalid value');\n        // Find the minimal version number to use\n        var version;\n        var dataUsedBits;\n        for (version = minVersion;; version++) {\n          var _dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8; // Number of data bits available\n          var usedBits = QrSegment.getTotalBits(segs, version);\n          if (usedBits <= _dataCapacityBits) {\n            dataUsedBits = usedBits;\n            break; // This version number is found to be suitable\n          }\n\n          if (version >= maxVersion)\n            // All versions in the range could not fit the given data\n            throw new RangeError('Data too long');\n        }\n        // Increase the error correction level while the data still fits in the current version number\n        for (var _i10 = 0, _arr = [QrCode.Ecc.MEDIUM, QrCode.Ecc.QUARTILE, QrCode.Ecc.HIGH]; _i10 < _arr.length; _i10++) {\n          var newEcl = _arr[_i10];\n          // From low to high\n          if (boostEcl && dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8) ecl = newEcl;\n        }\n        // Concatenate all segments to create the data bit string\n        var bb = [];\n        var _iterator2 = _createForOfIteratorHelper(segs),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var seg = _step2.value;\n            appendBits(seg.mode.modeBits, 4, bb);\n            appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n            var _iterator3 = _createForOfIteratorHelper(seg.getData()),\n              _step3;\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var b = _step3.value;\n                bb.push(b);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        assert(bb.length == dataUsedBits);\n        // Add terminator and pad up to a byte if applicable\n        var dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8;\n        assert(bb.length <= dataCapacityBits);\n        appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n        appendBits(0, (8 - bb.length % 8) % 8, bb);\n        assert(bb.length % 8 == 0);\n        // Pad with alternating bytes until data capacity is reached\n        for (var padByte = 0xec; bb.length < dataCapacityBits; padByte ^= 0xec ^ 0x11) appendBits(padByte, 8, bb);\n        // Pack bits into bytes in big endian\n        var dataCodewords = [];\n        while (dataCodewords.length * 8 < bb.length) dataCodewords.push(0);\n        bb.forEach(function (b, i) {\n          return dataCodewords[i >>> 3] |= b << 7 - (i & 7);\n        });\n        // Create the QR Code object\n        return new QrCode(version, ecl, dataCodewords, mask);\n      }\n    }, {\n      key: \"getNumRawDataModules\",\n      value: function getNumRawDataModules(ver) {\n        if (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION) throw new RangeError('Version number out of range');\n        var result = (16 * ver + 128) * ver + 64;\n        if (ver >= 2) {\n          var numAlign = Math.floor(ver / 7) + 2;\n          result -= (25 * numAlign - 10) * numAlign - 55;\n          if (ver >= 7) result -= 36;\n        }\n        assert(208 <= result && result <= 29648);\n        return result;\n      }\n      // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n      // QR Code of the given version number and error correction level, with remainder bits discarded.\n      // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n    }, {\n      key: \"getNumDataCodewords\",\n      value: function getNumDataCodewords(ver, ecl) {\n        return Math.floor(QrCode.getNumRawDataModules(ver) / 8) - QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      }\n      // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n      // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n    }, {\n      key: \"reedSolomonComputeDivisor\",\n      value: function reedSolomonComputeDivisor(degree) {\n        if (degree < 1 || degree > 255) throw new RangeError('Degree out of range');\n        // Polynomial coefficients are stored from highest to lowest power, excluding the leading term which is always 1.\n        // For example the polynomial x^3 + 255x^2 + 8x + 93 is stored as the uint8 array [255, 8, 93].\n        var result = [];\n        for (var i = 0; i < degree - 1; i++) result.push(0);\n        result.push(1); // Start off with the monomial x^0\n        // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),\n        // and drop the highest monomial term which is always 1x^degree.\n        // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).\n        var root = 1;\n        for (var _i11 = 0; _i11 < degree; _i11++) {\n          // Multiply the current product by (x - r^i)\n          for (var j = 0; j < result.length; j++) {\n            result[j] = QrCode.reedSolomonMultiply(result[j], root);\n            if (j + 1 < result.length) result[j] ^= result[j + 1];\n          }\n          root = QrCode.reedSolomonMultiply(root, 0x02);\n        }\n        return result;\n      }\n      // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n    }, {\n      key: \"reedSolomonComputeRemainder\",\n      value: function reedSolomonComputeRemainder(data, divisor) {\n        var result = divisor.map(function (_) {\n          return 0;\n        });\n        var _iterator4 = _createForOfIteratorHelper(data),\n          _step4;\n        try {\n          var _loop2 = function _loop2() {\n            var b = _step4.value;\n            // Polynomial division\n            var factor = b ^ result.shift();\n            result.push(0);\n            divisor.forEach(function (coef, i) {\n              return result[i] ^= QrCode.reedSolomonMultiply(coef, factor);\n            });\n          };\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            _loop2();\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        return result;\n      }\n      // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n      // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n    }, {\n      key: \"reedSolomonMultiply\",\n      value: function reedSolomonMultiply(x, y) {\n        if (x >>> 8 != 0 || y >>> 8 != 0) throw new RangeError('Byte out of range');\n        // Russian peasant multiplication\n        var z = 0;\n        for (var i = 7; i >= 0; i--) {\n          z = z << 1 ^ (z >>> 7) * 0x11d;\n          z ^= (y >>> i & 1) * x;\n        }\n        assert(z >>> 8 == 0);\n        return z;\n      }\n    }]);\n    return QrCode;\n  }();\n  /*-- Constants and tables --*/\n  // The minimum version number supported in the QR Code Model 2 standard.\n  QrCode.MIN_VERSION = 1;\n  // The maximum version number supported in the QR Code Model 2 standard.\n  QrCode.MAX_VERSION = 40;\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30] // High\n  ];\n\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25], [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49], [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68], [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81] // High\n  ];\n\n  qrcodegen.QrCode = QrCode;\n  // Appends the given number of low-order bits of the given value\n  // to the given buffer. Requires 0 <= len <= 31 and 0 <= val < 2^len.\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0) throw new RangeError('Value out of range');\n    for (var i = len - 1; i >= 0; i-- // Append bit by bit\n    ) bb.push(val >>> i & 1);\n  }\n  // Returns true iff the i'th bit of x is set to 1.\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  // Throws an exception if the given condition is false.\n  function assert(cond) {\n    if (!cond) throw new Error('Assertion error');\n  }\n  /*---- Data segment class ----*/\n  /*\n   * A segment of character/binary/control data in a QR Code symbol.\n   * Instances of this class are immutable.\n   * The mid-level way to create a segment is to take the payload data\n   * and call a static factory function such as QrSegment.makeNumeric().\n   * The low-level way to create a segment is to custom-make the bit buffer\n   * and call the QrSegment() constructor with appropriate values.\n   * This segment class imposes no length restrictions, but QR Codes have restrictions.\n   * Even in the most favorable conditions, a QR Code can only hold 7089 characters of data.\n   * Any segment longer than this is meaningless for the purpose of generating QR Codes.\n   */\n  var QrSegment = /*#__PURE__*/function () {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    function QrSegment(\n    // The mode indicator of this segment.\n    mode,\n    // The length of this segment's unencoded data. Measured in characters for\n    // numeric/alphanumeric/kanji mode, bytes for byte mode, and 0 for ECI mode.\n    // Always zero or positive. Not the same as the data's bit length.\n    numChars,\n    // The data bits of this segment. Accessed through getData().\n    bitData) {\n      _classCallCheck(this, QrSegment);\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0) throw new RangeError('Invalid argument');\n      this.bitData = bitData.slice(); // Make defensive copy\n    }\n    /*-- Methods --*/\n    // Returns a new copy of the data bits of this segment.\n    _createClass(QrSegment, [{\n      key: \"getData\",\n      value: function getData() {\n        return this.bitData.slice(); // Make defensive copy\n      }\n      // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n      // the given version. The result is infinity if a segment has too many characters to fit its length field.\n    }], [{\n      key: \"makeBytes\",\n      value: /*-- Static factory functions (mid level) --*/\n      // Returns a segment representing the given binary data encoded in\n      // byte mode. All input byte arrays are acceptable. Any text string\n      // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n      function makeBytes(data) {\n        var bb = [];\n        var _iterator5 = _createForOfIteratorHelper(data),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var b = _step5.value;\n            appendBits(b, 8, bb);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n        return new QrSegment(QrSegment.Mode.BYTE, data.length, bb);\n      }\n      // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n    }, {\n      key: \"makeNumeric\",\n      value: function makeNumeric(digits) {\n        if (!QrSegment.isNumeric(digits)) throw new RangeError('String contains non-numeric characters');\n        var bb = [];\n        for (var i = 0; i < digits.length;) {\n          // Consume up to 3 digits per iteration\n          var n = Math.min(digits.length - i, 3);\n          appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n          i += n;\n        }\n        return new QrSegment(QrSegment.Mode.NUMERIC, digits.length, bb);\n      }\n      // Returns a segment representing the given text string encoded in alphanumeric mode.\n      // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n      // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    }, {\n      key: \"makeAlphanumeric\",\n      value: function makeAlphanumeric(text) {\n        if (!QrSegment.isAlphanumeric(text)) throw new RangeError('String contains unencodable characters in alphanumeric mode');\n        var bb = [];\n        var i;\n        for (i = 0; i + 2 <= text.length; i += 2) {\n          // Process groups of 2\n          var temp = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n          temp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n          appendBits(temp, 11, bb);\n        }\n        if (i < text.length)\n          // 1 character remaining\n          appendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n        return new QrSegment(QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n      }\n      // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n      // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n    }, {\n      key: \"makeSegments\",\n      value: function makeSegments(text) {\n        // Select the most efficient segment encoding automatically\n        if (text == '') return [];else if (QrSegment.isNumeric(text)) return [QrSegment.makeNumeric(text)];else if (QrSegment.isAlphanumeric(text)) return [QrSegment.makeAlphanumeric(text)];else return [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))];\n      }\n      // Returns a segment representing an Extended Channel Interpretation\n      // (ECI) designator with the given assignment value.\n    }, {\n      key: \"makeEci\",\n      value: function makeEci(assignVal) {\n        var bb = [];\n        if (assignVal < 0) throw new RangeError('ECI assignment value out of range');else if (assignVal < 1 << 7) appendBits(assignVal, 8, bb);else if (assignVal < 1 << 14) {\n          appendBits(2, 2, bb);\n          appendBits(assignVal, 14, bb);\n        } else if (assignVal < 1000000) {\n          appendBits(6, 3, bb);\n          appendBits(assignVal, 21, bb);\n        } else throw new RangeError('ECI assignment value out of range');\n        return new QrSegment(QrSegment.Mode.ECI, 0, bb);\n      }\n      // Tests whether the given string can be encoded as a segment in numeric mode.\n      // A string is encodable iff each character is in the range 0 to 9.\n    }, {\n      key: \"isNumeric\",\n      value: function isNumeric(text) {\n        return QrSegment.NUMERIC_REGEX.test(text);\n      }\n      // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n      // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n      // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    }, {\n      key: \"isAlphanumeric\",\n      value: function isAlphanumeric(text) {\n        return QrSegment.ALPHANUMERIC_REGEX.test(text);\n      }\n    }, {\n      key: \"getTotalBits\",\n      value: function getTotalBits(segs, version) {\n        var result = 0;\n        var _iterator6 = _createForOfIteratorHelper(segs),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var seg = _step6.value;\n            var ccbits = seg.mode.numCharCountBits(version);\n            if (seg.numChars >= 1 << ccbits) return Infinity; // The segment's length doesn't fit the field's bit width\n            result += 4 + ccbits + seg.bitData.length;\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n        return result;\n      }\n      // Returns a new array of bytes representing the given string encoded in UTF-8.\n    }, {\n      key: \"toUtf8ByteArray\",\n      value: function toUtf8ByteArray(str) {\n        str = encodeURI(str);\n        var result = [];\n        for (var i = 0; i < str.length; i++) {\n          if (str.charAt(i) != '%') result.push(str.charCodeAt(i));else {\n            result.push(parseInt(str.substring(i + 1, i + 3), 16));\n            i += 2;\n          }\n        }\n        return result;\n      }\n    }]);\n    return QrSegment;\n  }();\n  /*-- Constants --*/\n  // Describes precisely all strings that are encodable in numeric mode.\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  QrSegment.ALPHANUMERIC_CHARSET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';\n  qrcodegen.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n/*---- Public helper enumeration ----*/\n(function (qrcodegen) {\n  var QrCode;\n  (function (QrCode) {\n    /*\n     * The error correction level in a QR Code symbol. Immutable.\n     */\n    var Ecc = /*#__PURE__*/_createClass( /*-- Constructor and fields --*/\n    function Ecc(\n    // In the range 0 to 3 (unsigned 2-bit integer).\n    ordinal,\n    // (Package-private) In the range 0 to 3 (unsigned 2-bit integer).\n    formatBits) {\n      _classCallCheck(this, Ecc);\n      this.ordinal = ordinal;\n      this.formatBits = formatBits;\n    });\n    /*-- Constants --*/\n    Ecc.LOW = new Ecc(0, 1); // The QR Code can tolerate about  7% erroneous codewords\n    Ecc.MEDIUM = new Ecc(1, 0); // The QR Code can tolerate about 15% erroneous codewords\n    Ecc.QUARTILE = new Ecc(2, 3); // The QR Code can tolerate about 25% erroneous codewords\n    Ecc.HIGH = new Ecc(3, 2); // The QR Code can tolerate about 30% erroneous codewords\n    QrCode.Ecc = Ecc;\n  })(QrCode = qrcodegen.QrCode || (qrcodegen.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n/*---- Public helper enumeration ----*/\n(function (qrcodegen) {\n  var QrSegment;\n  (function (QrSegment) {\n    /*\n     * Describes how a segment's data bits are interpreted. Immutable.\n     */\n    var Mode = /*#__PURE__*/function () {\n      /*-- Constructor and fields --*/\n      function Mode(\n      // The mode indicator bits, which is a uint4 value (range 0 to 15).\n      modeBits,\n      // Number of character count bits for three different version ranges.\n      numBitsCharCount) {\n        _classCallCheck(this, Mode);\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      /*-- Method --*/\n      // (Package-private) Returns the bit width of the character count field for a segment in\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n      _createClass(Mode, [{\n        key: \"numCharCountBits\",\n        value: function numCharCountBits(ver) {\n          return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n        }\n      }]);\n      return Mode;\n    }();\n    /*-- Constants --*/\n    Mode.NUMERIC = new Mode(0x1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new Mode(0x2, [9, 11, 13]);\n    Mode.BYTE = new Mode(0x4, [8, 16, 16]);\n    Mode.KANJI = new Mode(0x8, [8, 10, 12]);\n    Mode.ECI = new Mode(0x7, [0, 0, 0]);\n    QrSegment.Mode = Mode;\n  })(QrSegment = qrcodegen.QrSegment || (qrcodegen.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\n// Modification to export for actual use\nexport default qrcodegen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}